<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerar Documentos Word</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pizzip/3.0.4/pizzip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/docxtemplater/3.22.0/docxtemplater.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
</head>
<body>
    <h1>Gerar Documentos Word a partir de TXT</h1>
    <input type="file" id="inputFile" />
    <button onclick="processFile()">Gerar Documentos</button>

    <script src="app.js"></script>
</body>
</html>



// Função para processar o arquivo quando o botão for clicado
function processFile() {
    const inputFile = document.getElementById('inputFile');
    const file = inputFile.files[0];
    
    if (!file) {
        alert('Por favor, selecione um arquivo .txt.');
        return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
        const content = e.target.result;
        processFileContent(content);
    };
    reader.readAsText(file);
}

// Função para processar o conteúdo do arquivo .txt
function processFileContent(content) {
    const registros = content.split('\n'); // Divida o conteúdo do arquivo por linha

    // Processa cada linha, que é um bloco de dados separado por '|'
    registros.forEach((registro, index) => {
        const campos = registro.split('|'); // Separando os campos por '|'

        // Chama a função para gerar o Word para cada bloco de dados
        gerarWord(campos, index);
    });
}

// Função para gerar o documento Word para cada bloco de dados
function gerarWord(campos, index) {
    const docTemplateUrl = 'template.docx'; // Caminho para o modelo de documento .docx

    // Faz o fetch do template do Word
    fetch(docTemplateUrl)
        .then(response => response.arrayBuffer())
        .then(arrayBuffer => {
            // Inicializa o PizZip e o Docxtemplater
            const zip = new PizZip(arrayBuffer);
            const doc = new Docxtemplater(zip);

            // Substitui os placeholders no template pelos dados dos campos
            doc.setData({
                campo1: campos[0], // Supondo que o arquivo .txt tenha os dados separados por '|'
                campo2: campos[1],
                campo3: campos[2],
                campo4: campos[3] // Continue com os campos que tiver
            });

            try {
                doc.render(); // Gera o documento com as substituições
            } catch (error) {
                console.error('Erro ao processar o template:', error);
                return;
            }

            // Gera o arquivo .docx
            const output = doc.getZip().generate({ type: 'blob' });

            // Salva o arquivo com um nome único baseado no índice
            saveAs(output, `documento_${index + 1}.docx`);
        })
        .catch(error => console.error('Erro ao carregar o template:', error));
}
